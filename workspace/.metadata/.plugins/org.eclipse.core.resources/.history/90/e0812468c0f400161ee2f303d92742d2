package me.bpweber.practiceserver;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.HumanEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

public class ItemVendors implements Listener {

	public static HashMap<String, ItemStack> buyingitem = new HashMap<String, ItemStack>();
	public static HashMap<String, Integer> buyingprice = new HashMap<String, Integer>();

	public void onEnable() {
		Main.log.info("[ItemVendors] has been enabled.");
		Bukkit.getServer().getPluginManager().registerEvents(this, Main.plugin);
	}

	public void onDisable() {
		Main.log.info("[ItemVendors] has been disabled.");
	}

	public static Integer getPriceFromLore(ItemStack is) {
		int price = 0;
		if (is != null && is.getType() != Material.AIR && is.getItemMeta().hasLore()) {
			for (String line : is.getItemMeta().getLore()) {
				if (line.contains("Price: ")) {
					String val = line;
					val = ChatColor.stripColor(val);
					val = val.substring(7, val.length() - 1);
					try {
						price = Integer.parseInt(val);
					} catch (Exception e) {
						price = 0;
					}
				}
			}
		}
		return price;
	}

	ItemStack food(int type) {
		ItemStack is = new ItemStack(Material.BREAD);
		int price = 2;
		if (type == 0) {
			is.setType(Material.MELON);
			price = 2;
		}
		if (type == 1) {
			is.setType(Material.APPLE);
			price = 4;
		}
		if (type == 2) {
			is.setType(Material.BREAD);
			price = 5;
		}
		if (type == 3) {
			is.setType(Material.PUMPKIN_PIE);
			price = 8;
		}
		if (type == 4) {
			is.setType(Material.COOKED_BEEF);
			price = 10;
		}
		ItemMeta im = is.getItemMeta();
		im.setLore(Arrays.asList(ChatColor.GREEN + "Price: " + ChatColor.WHITE + price + "g"));
		is.setItemMeta(im);
		return is;
	}

	@EventHandler
	public void onBankClick(PlayerInteractEntityEvent e) {
		if (e.getRightClicked() instanceof HumanEntity) {
			HumanEntity p = (HumanEntity) e.getRightClicked();
			if (p.getName() == null)
				return;
			if (!p.hasMetadata("NPC"))
				return;
			if (p.getName().equals("Banker")) {
				e.getPlayer().sendMessage(ChatColor.GRAY + "Banker: " + ChatColor.WHITE
						+ "Use these bank chests to store your precious items.");
			} else if (p.getName().equals("Item Vendor")) {
				e.getPlayer().sendMessage(ChatColor.GRAY + "Item Vendor: " + ChatColor.WHITE
						+ "I will take your gems in return for special items.");
				Inventory inv = Bukkit.getServer().createInventory(null, 18, "Item Vendor");
				inv.addItem(Items.orb(true));
				inv.addItem(Items.enchant(1, 0, true));
				inv.addItem(Items.enchant(1, 1, true));
				inv.addItem(Items.enchant(2, 0, true));
				inv.addItem(Items.enchant(2, 1, true));
				inv.addItem(Items.enchant(3, 0, true));
				inv.addItem(Items.enchant(3, 1, true));
				inv.addItem(Items.enchant(4, 0, true));
				inv.addItem(Items.enchant(4, 1, true));
				inv.addItem(Items.enchant(5, 0, true));
				inv.addItem(Items.enchant(5, 1, true));
				e.getPlayer().openInventory(inv);
				e.getPlayer().playSound(e.getPlayer().getLocation(), Sound.WOOD_CLICK, 1, 1);
			} else if (p.getName().equals("Fisherman")) {
				e.getPlayer().sendMessage(
						ChatColor.GRAY + "Fisherman: " + ChatColor.WHITE + "These fish can give you special powers.");
				Inventory inv = Bukkit.getServer().createInventory(null, 9, "Fisherman");
				inv.addItem(Speedfish.fish(1, true));
				inv.addItem(Speedfish.fish(2, true));
				inv.addItem(Speedfish.fish(3, true));
				inv.addItem(Speedfish.fish(4, true));
				inv.addItem(Speedfish.fish(5, true));
				e.getPlayer().openInventory(inv);
				e.getPlayer().playSound(e.getPlayer().getLocation(), Sound.WOOD_CLICK, 1, 1);
			} else if (p.getName().equals("Food Vendor")) {
				Inventory inv = Bukkit.getServer().createInventory(null, 9, "Food Vendor");
				inv.addItem(food(0));
				inv.addItem(food(1));
				inv.addItem(food(2));
				inv.addItem(food(3));
				inv.addItem(food(4));
				e.getPlayer().openInventory(inv);
				e.getPlayer().playSound(e.getPlayer().getLocation(), Sound.WOOD_CLICK, 1, 1);
			}
		}
	}

	@EventHandler
	public void onInvClick(final InventoryClickEvent e) {
		final Player p = (Player) e.getWhoClicked();
		if (e.getInventory().getTitle().equals("Item Vendor")) {
			e.setCancelled(true);
			if (e.getCurrentItem() != null
					&& (e.getCurrentItem().getType() == Material.MAGMA_CREAM
							|| e.getCurrentItem().getType() == Material.EMPTY_MAP)
					&& e.getCurrentItem().getItemMeta().hasLore()) {
				List<String> lore = e.getCurrentItem().getItemMeta().getLore();
				if (lore.get(lore.size() - 1).contains("Price:")) {
					int price = getPriceFromLore(e.getCurrentItem());
					if (Money.hasEnoughGems(p, price)) {
						ItemStack is = new ItemStack(e.getCurrentItem().getType());
						ItemMeta im = is.getItemMeta();
						im.setDisplayName(e.getCurrentItem().getItemMeta().getDisplayName());
						lore.remove(lore.size() - 1);
						im.setLore(lore);
						is.setItemMeta(im);
						buyingitem.put(p.getName(), is);
						buyingprice.put(p.getName(), price);
						p.sendMessage(ChatColor.GREEN + "Enter the " + ChatColor.BOLD + "QUANTITY" + ChatColor.GREEN
								+ " you'd like to purchase.");
						p.sendMessage(ChatColor.GRAY + "MAX: 64X (" + (price * 64) + "g), OR " + price + "g/each.");
						p.closeInventory();
					} else {
						p.sendMessage(ChatColor.RED + "You do NOT have enough gems to purchase this "
								+ e.getCurrentItem().getItemMeta().getDisplayName());
						p.sendMessage("" + ChatColor.RED + ChatColor.BOLD + "COST: " + ChatColor.RED + price
								+ ChatColor.BOLD + "G");
						p.closeInventory();
					}
				}
			}
		} else if (e.getCurrentItem() != null && e.getInventory().getTitle().equals("Fisherman")) {
			e.setCancelled(true);
			if (e.getCurrentItem() != null && (e.getCurrentItem().getType() == Material.RAW_FISH)
					&& e.getCurrentItem().getItemMeta().hasLore()) {
				List<String> lore = e.getCurrentItem().getItemMeta().getLore();
				if (lore.get(lore.size() - 1).contains("Price:")) {
					int price = getPriceFromLore(e.getCurrentItem());
					if (Money.hasEnoughGems(p, price)) {
						ItemStack is = new ItemStack(e.getCurrentItem().getType());
						ItemMeta im = is.getItemMeta();
						im.setDisplayName(e.getCurrentItem().getItemMeta().getDisplayName());
						lore.remove(lore.size() - 1);
						im.setLore(lore);
						is.setItemMeta(im);
						buyingitem.put(p.getName(), is);
						buyingprice.put(p.getName(), price);
						p.sendMessage(ChatColor.GREEN + "Enter the " + ChatColor.BOLD + "QUANTITY" + ChatColor.GREEN
								+ " you'd like to purchase.");
						p.sendMessage(ChatColor.GRAY + "MAX: 64X (" + (price * 64) + "g), OR " + price + "g/each.");
						p.closeInventory();
					} else {
						p.sendMessage(ChatColor.RED + "You do NOT have enough gems to purchase this "
								+ e.getCurrentItem().getItemMeta().getDisplayName());
						p.sendMessage("" + ChatColor.RED + ChatColor.BOLD + "COST: " + ChatColor.RED + price
								+ ChatColor.BOLD + "G");
						p.closeInventory();
					}
				}
			}
		} else if (e.getCurrentItem() != null && e.getInventory().getTitle().equals("Food Vendor")) {
			e.setCancelled(true);
			if (e.getCurrentItem() != null
					&& (e.getCurrentItem().getType() == Material.MELON || e.getCurrentItem().getType() == Material.APPLE
							|| e.getCurrentItem().getType() == Material.BREAD
							|| e.getCurrentItem().getType() == Material.PUMPKIN_PIE
							|| e.getCurrentItem().getType() == Material.COOKED_BEEF)
					&& e.getCurrentItem().getItemMeta().hasLore()) {
				List<String> lore = e.getCurrentItem().getItemMeta().getLore();
				if (lore.get(0).contains("Price:")) {
					int price = getPriceFromLore(e.getCurrentItem());
					if (Money.hasEnoughGems(p, price)) {
						ItemStack is = new ItemStack(e.getCurrentItem().getType());
						buyingitem.put(p.getName(), is);
						buyingprice.put(p.getName(), price);
						p.sendMessage(ChatColor.GREEN + "Enter the " + ChatColor.BOLD + "QUANTITY" + ChatColor.GREEN
								+ " you'd like to purchase.");
						p.sendMessage(ChatColor.GRAY + "MAX: 64X (" + (price * 64) + "g), OR " + price + "g/each.");
						p.closeInventory();
					} else {
						p.sendMessage(ChatColor.RED + "You do NOT have enough gems to purchase this "
								+ e.getCurrentItem().getType().name());
						p.sendMessage("" + ChatColor.RED + ChatColor.BOLD + "COST: " + ChatColor.RED + price
								+ ChatColor.BOLD + "G");
						p.closeInventory();
					}
				}
			}
		}
	}

	@EventHandler(priority = EventPriority.LOWEST)
	public void onPromptChat(AsyncPlayerChatEvent e) {
		Player p = e.getPlayer();
		if (buyingitem.containsKey(p.getName()) && buyingprice.containsKey(p.getName())) {
			e.setCancelled(true);
			int price = buyingprice.get(p.getName());
			ItemStack is = buyingitem.get(p.getName());
			int amt = 0;
			if (e.getMessage().equalsIgnoreCase("cancel")) {
				p.sendMessage(ChatColor.RED + "Purchase of item - " + ChatColor.BOLD + "CANCELLED");
				buyingprice.remove(p.getName());
				buyingitem.remove(p.getName());
				return;
			}
			try {
				amt = Integer.parseInt(e.getMessage());
			} catch (Exception ex) {
				p.sendMessage(
						ChatColor.RED + "Please enter a valid integer, or type 'cancel' to void this item purchase.");
				return;
			}
			if (amt < 1) {
				p.sendMessage(ChatColor.RED + "You cannot purchase a NON-POSITIVE number.");
				return;
			}
			if (amt > 64) {
				p.sendMessage(
						ChatColor.RED + "You " + ChatColor.UNDERLINE + "cannot" + ChatColor.RED + " buy MORE than "
								+ ChatColor.BOLD + "64x" + ChatColor.RED + " of a material per transaction.");
				return;
			}
			if (!(Money.hasEnoughGems(p, amt * price))) {
				p.sendMessage(ChatColor.RED + "You do not have enough GEM(s) to complete this purchase.");
				p.sendMessage("" + ChatColor.GRAY + amt + " X " + price + " gem(s)/ea = " + (amt * price) + " gem(s).");
				return;
			} else {
				int empty = 0;
				if (is.getMaxStackSize() == 1) {
					for (int i = 0; i < p.getInventory().getSize(); i++)
						if (p.getInventory().getItem(i) == null
								|| p.getInventory().getItem(i).getType() == Material.AIR)
							empty++;
					if (amt > empty) {
						p.sendMessage(
								ChatColor.RED + "No space available in inventory. Type 'cancel' or clear some room.");
					} else {
						for (int i = 0; i < amt; i++)
							p.getInventory().setItem(p.getInventory().firstEmpty(), is);
						p.sendMessage(ChatColor.RED + "-" + (amt * price) + ChatColor.BOLD + "G");
						p.sendMessage(ChatColor.GREEN + "Transaction successful.");
						Money.takeGems(p, amt * price);
						buyingprice.remove(p.getName());
						buyingitem.remove(p.getName());
					}
				} else {
					if (p.getInventory().firstEmpty() == -1) {
						p.sendMessage(
								ChatColor.RED + "No space available in inventory. Type 'cancel' or clear some room.");
						return;
					} else {
						p.sendMessage(ChatColor.RED + "-" + (amt * price) + ChatColor.BOLD + "G");
						p.sendMessage(ChatColor.GREEN + "Transaction successful.");
						Money.takeGems(p, amt * price);
						is.setAmount(amt);
						p.getInventory().setItem(p.getInventory().firstEmpty(), is);
						buyingprice.remove(p.getName());
						buyingitem.remove(p.getName());
					}
				}
			}
		}
	}
}
